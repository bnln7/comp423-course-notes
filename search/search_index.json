{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Lavena's Course Notes","text":"<p>This is my home page. I will use it to organize and share my course notes.</p>"},{"location":"tutorials/go-setup/","title":"Setting up a Dev container for Go","text":"<ul> <li>Primary author: Baotran Nguyen</li> <li>Reviewer: Paige Pan</li> </ul>"},{"location":"tutorials/go-setup/#introduction","title":"Introduction","text":"<p>Here is a tutorial on setting up a new DevContainer project for the Go programming language. </p> <p>Note</p> <p>Many instructions reused from 423 MkDocs tutorial.</p>"},{"location":"tutorials/go-setup/#prerequisites","title":"Prerequisites","text":"<ol> <li>Github account: Create one here.</li> <li>Git: Install it here.</li> <li>Docker: Install it here.</li> <li>Command Terminal</li> <li>A tool to edit your code. In this tutorial, we will use VS Code (download here).</li> </ol>"},{"location":"tutorials/go-setup/#git-repo-set-up","title":"Git Repo Set-Up","text":""},{"location":"tutorials/go-setup/#create-a-local-directory-and-initialize-git","title":"Create a Local Directory and Initialize Git","text":"<ol> <li>Open your terminal or command prompt. </li> <li>Create a new directory for your project: <pre><code>mkdir &lt;name of directory&gt;\ncd &lt;name of directory&gt;\n</code></pre> For the purposes of this tutorial, the name of the directory will be \"hello\" and will be referred to as such. Example: <pre><code>mkdir hello\ncd hello\n</code></pre></li> <li>Initialize a new Git repository: <pre><code>git init\n</code></pre></li> <li>Create a README file: <pre><code>echo \"[Go Tutorial](https://&lt;your-github-username-here&gt;.github.io/comp423-course-notes/tutorials/go-setup/)\"&gt;README.md\necho \"Navigate to tutorials in the menu on the website to see the Go Tutorial if necessary.\"&gt;&gt;README.md\ngit add README.md\ngit commit -m \"Initial commit with README\"\n</code></pre></li> </ol>"},{"location":"tutorials/go-setup/#create-a-remote-repository-on-github","title":"Create a Remote Repository on Github","text":"<ol> <li>Log in to your Github account and navigate to the Create a New Repository page.</li> <li> <p>Fill in the details as follows:</p> <ul> <li>Repository Name: <code>go-hello-world-project</code></li> <li>Description: \"Hello World Go Program\"</li> <li>Visibility: Public</li> <li>Click <code>Create Repository</code></li> </ul> </li> </ol>"},{"location":"tutorials/go-setup/#link-your-local-repository-github","title":"Link your Local Repository Github","text":"<ol> <li> <p>In your terminal, add the Github repository as a remote: <pre><code>git remote add origin https://github.com/&lt;your-username&gt;/go-hello-world-project.git\n</code></pre> Replace <code>&lt;your-username&gt;</code> with your GitHub username.</p> </li> <li> <p>Check your default branch name with the subcommand <code>git branch</code>. If it's not <code>main</code>, rename it to <code>main</code> with the following command: <code>git branch -M main</code>.  <pre><code>git push --set-upstream origin main\n</code></pre></p> </li> </ol>"},{"location":"tutorials/go-setup/#creating-a-new-dev-container","title":"Creating a New Dev Container","text":""},{"location":"tutorials/go-setup/#add-development-container-configuration","title":"Add Development Container Configuration","text":"<ol> <li>Open Docker and then open VS Code. In VS Code, open the <code>hello</code> directory. You can do this via: File &gt; Open Folder.</li> <li>Install the Dev Containers extension for VS Code. Do so by navigating to the left side and clicking the option with the 4 squares (the extensions option). In the search bar, type Dev Containers. Of the options that appear, click install for the one that says \"Dev Containers\" by Microsoft.</li> <li>At the root of the project (<code>hello</code>), create a new directory labelled <code>.devcontainer</code>. Inside this newly created directory, create a new file labelled <code>devcontainer.json</code>. The <code>devcontainer.json</code> file defines the configuration for your development environment. In this file, write the following to create the correct environment for your program. <pre><code>{\n  \"name\": \"Go Hello World Project\",\n  \"image\": \"mcr.microsoft.com/vscode/devcontainers/go:latest\",\n  \"customizations\": {\n    \"vscode\": {\n      \"settings\": {},\n      \"extensions\": [\"golang.go\"]\n    }\n  },\n  \"postCreateCommand\": \"go version\"\n}\n</code></pre> <code>devcontainer.json</code> files follow the above format.<ul> <li><code>name</code> names the dev container. This name can be seen when the dev container is running.</li> <li><code>image</code> indicates the development environment that will be used</li> <li><code>extensions</code> installs the necessary extensions inside the dev container for the correct environment</li> <li><code>postCreateCommand</code> runs the specified command right after the dev container is created</li> </ul> </li> <li>Reopen the project in a VSCode Dev Container by pressing <code>Ctrl+Shift+P</code> or <code>Cmd+Shift+P</code>. Wait for everything to be installed. It should be finished when you see a message in the terminal asking you to press any button to terminate. Once you see the message, press any button or open a new terminal. </li> <li>Running <pre><code>go version\n</code></pre> should check that recent version of Go is being used.</li> </ol>"},{"location":"tutorials/go-setup/#initializingdoing-the-project","title":"Initializing/Doing the Project","text":"<ol> <li> <p>Change to the directory you created if not already in it. Type  <pre><code>pwd\n</code></pre> into the terminal to check. If the end of the output is not the name of your directory, change directories. For example, if you are in the parent directory of <code>hello</code>, you would type: Example: <pre><code>cd hello\n</code></pre></p> </li> <li> <p>Enable dependency tracking for your code by typing this in the terminal of your editor: <pre><code>go mod init example/hello\n</code></pre> Doing so should result in this output: <pre><code>go: creating new go.mod: module example/hello\n</code></pre></p> </li> <li> <p>In your <code>hello</code> directory, create a new file labelled <code>hello.go</code>. This file will be where you write your code. </p> </li> <li> <p>In <code>hello.go</code>, type or paste this in and save the file. <pre><code>package main\n\nimport \"fmt\"\n\nfunc main() {\n    fmt.Println(\"Hello COMP423\")\n}\n</code></pre></p> </li> <li> <p>Run your code with this command: <pre><code>go run .\n</code></pre> Example output: <pre><code>Hello COMP423\n</code></pre></p> </li> <li> <p>Make this into an executable using the build subcommand. <pre><code>go build hello.go\n</code></pre> Running the built binary: Calling run just executes the program. In contrast, the build command makes the program into an executable. This executable can then be run. Just like the gcc command in the C programming language, the go build command in Go turns the file into an executable. Just like C, it can also then be run by typing</p> </li> </ol> <p>Note</p> <p>mac/linux</p> <pre><code>./hello\n</code></pre>"},{"location":"tutorials/go-setup/#final-steps-pushing-to-a-repo","title":"Final Steps: Pushing to a Repo","text":"<ol> <li>In your terminal, type <pre><code>git add .\ngit commit -m \"Final Hello World Project\"\ngit push -u origin main\n</code></pre></li> </ol> <p>Congratulations! You are done!</p>"}]}